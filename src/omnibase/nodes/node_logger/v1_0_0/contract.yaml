# Canonical ONEX contract for the logger node.
# This contract defines the input/output state and error codes for node_logger.
# All fields and error codes must match the logger node's protocol and models.
#
# Parity update: version fields now use SemVerModel, output_field added for extensibility, logger_output_field defined below.
---

contract_version: 1.0.0
node_name: node_logger
node_version: 1.0.0
contract_name: node_logger_contract
contract_description: State contract for node_logger (structured logging, output formatting, and context-aware logging)

input_state:
  type: object
  properties:
    version:
      $ref: '#/definitions/semver_model'
      description: Schema version for input state (semantic versioning)
    log_level:
      type: string
      enum:
        - debug
        - info
        - warning
        - error
        - critical
      description: Log level for the message
    message:
      type: string
      description: Primary log message content
    output_format:
      type: string
      enum:
        - json
        - yaml
        - markdown
        - text
        - csv
      description: Output format for the log entry
    context:
      type: object
      description: Additional context data to include with the log entry
      nullable: true
    tags:
      type: array
      items:
        type: string
      description: Optional tags for categorizing and filtering log entries
      nullable: true
    correlation_id:
      type: string
      description: Optional correlation ID for tracing related log entries
      nullable: true
    timestamp:
      type: string
      format: date-time
      description: ISO 8601 timestamp when the log entry was created
  required:
    - version
    - log_level
    - message
    - output_format

output_state:
  type: object
  properties:
    version:
      $ref: '#/definitions/semver_model'
      description: Schema version for output state (matches input)
    status:
      type: string
      enum:
        - success
        - warning
        - error
        - skipped
        - fixed
        - partial
        - info
        - unknown
      description: Result status of the logging operation
    message:
      type: string
      description: Human-readable result or error message
    formatted_log:
      type: string
      description: The formatted log entry in the requested output format
    output_format:
      type: string
      enum:
        - json
        - yaml
        - markdown
        - text
        - csv
      description: The format used for the formatted log entry
    timestamp:
      type: string
      format: date-time
      description: ISO 8601 timestamp when the log entry was processed
    log_level:
      type: string
      enum:
        - debug
        - info
        - warning
        - error
        - critical
      description: The log level of the processed entry
    entry_size:
      type: integer
      description: Size of the formatted log entry in bytes
    output_field:
      $ref: '#/definitions/logger_output_field'
      description: Optional extensible output field for logger node
      nullable: true
  required:
    - version
    - status
    - message
    - formatted_log
    - output_format
    - timestamp
    - log_level
    - entry_size

error_codes:
  - UNKNOWN_ERROR
  - INVALID_PARAMETER
  - MISSING_REQUIRED_PARAMETER
  - SCHEMA_VALIDATION_FAILED
  - UNSUPPORTED_OPERATION
  - PARAMETER_OUT_OF_RANGE
  - FILE_WRITE_ERROR
  - FORMAT_NOT_SUPPORTED
  - CONTEXT_TOO_DEEP
  - MESSAGE_TOO_LONG

examples:
  valid_input:
    version: {major: 1, minor: 0, patch: 0}
    log_level: info
    message: "Logger node test message"
    output_format: json
    context: {"user": "alice", "action": "login"}
    tags: ["auth", "user"]
    correlation_id: "corr-abc-123"
    timestamp: "2025-06-10T12:00:00Z"
  valid_output:
    version: {major: 1, minor: 0, patch: 0}
    status: success
    message: "Log entry processed successfully"
    formatted_log: "{...}"
    output_format: json
    timestamp: "2025-06-10T12:00:00Z"
    log_level: info
    entry_size: 256
    output_field:
      backend: "stdout"
      integration: true
      custom: {"extra": "value"}

definitions:
  semver_model:
    type: object
    properties:
      major:
        type: integer
      minor:
        type: integer
      patch:
        type: integer
      prerelease:
        type: string
        nullable: true
      build:
        type: string
        nullable: true
    required:
      - major
      - minor
      - patch
  logger_output_field:
    type: object
    properties:
      backend:
        type: string
        description: Output backend (e.g., stdout, file, etc.)
      integration:
        type: boolean
        description: Integration flag for test scenarios
        nullable: true
      custom:
        type: object
        description: Custom extensible field for future use
        nullable: true
    required:
      - backend

hash: ''
last_modified_at: '2025-06-10T00:00:00Z'
