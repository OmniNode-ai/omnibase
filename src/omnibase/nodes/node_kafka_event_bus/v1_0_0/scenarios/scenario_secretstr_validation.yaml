---
# SecretStr Security Validation Scenario
# Tests that sensitive credentials are properly masked using Pydantic SecretStr
scenario_name: "scenario_secretstr_validation"
node_name: "node_kafka_event_bus"
node_version: "v1_0_0"
description: "SecretStr security validation - verifies credentials are properly masked in all outputs"

# === Mock Dependencies for Security Testing ===
dependency_mode: "mock"
external_services:
  kafka_secure:
    service_name: "kafka_secure"
    service_type: "event_bus"
    connection_config:
      bootstrap_servers: "secure.kafka.example.com:9093"
      topic_prefix: "secretstr_test"
      consumer_group: "secretstr_group"
      timeout_ms: 5000
      security_protocol: "SASL_SSL"
      sasl_username: "test_user"
      sasl_password: "super_secret_password_123456"  # Should be converted to SecretStr and masked
      ssl_keyfile: "/path/to/client.key"
      ssl_certfile: "/path/to/client.crt"
      ssl_cafile: "/path/to/ca.crt"
    health_check_enabled: true
    health_check_timeout: 10
    required: true

# Input state for SecretStr testing
input_state:
  schema_version: "1.0.0"
  command: "health_check"
  event_bus_config:
    bootstrap_servers: "secure.kafka.example.com:9093"
    consumer_group: "secretstr_test_group"
    topic_prefix: "secretstr_test"
    timeout_ms: 5000
    security_protocol: "SASL_SSL"
    sasl_username: "test_user"
    sasl_password: "another_secret_password_789"  # Should be masked
    ssl_keyfile: "/path/to/client.key"
    ssl_certfile: "/path/to/client.crt"
    ssl_cafile: "/path/to/ca.crt"
  correlation_id: "secretstr-test-789"

# Expected outputs for SecretStr scenario
expected_outputs:
  status: "success"
  execution_mode: "mock"
  secretstr_validation_passed: true
  credentials_masked: true
  no_plaintext_passwords: true

# Registry configuration for SecretStr testing
registry_config: "secretstr_test"
registry_configs:
  secretstr_test:
    name: "secretstr_test"
    tools:
      event_bus: "InMemoryEventBus"  # Mock for security testing
      metadata_loader: "DefaultMetadataLoader"
      cli_commands: "MockCliCommands"

# Test configuration
test_config:
  timeout: 5
  required_external_services: ["kafka_secure"]
  skip_if_services_unavailable: false  # Mock scenario should always run
  cleanup_after_test: true

# SecretStr validation test cases
secretstr_test_cases:
  password_masking:
    - test_name: "SASL password masking"
      field: "sasl_password"
      input_value: "super_secret_password_123456"
      expected_masked_pattern: "SecretStr('**********')"
      expected_repr_masked: true
    - test_name: "SSL key password masking"
      field: "ssl_keyfile_password"
      input_value: "ssl_key_secret_456"
      expected_masked_pattern: "SecretStr('**********')"
      expected_repr_masked: true
    - test_name: "Short password masking"
      field: "sasl_password"
      input_value: "abc"
      expected_masked_pattern: "SecretStr('**********')"
      expected_repr_masked: true
  
  model_dump_security:
    - test_name: "Model dump excludes secret values"
      description: "Verify model_dump() doesn't expose SecretStr values"
      expected_behavior: "SecretStr fields should be excluded or masked"
    - test_name: "JSON serialization security"
      description: "Verify JSON serialization masks SecretStr fields"
      expected_behavior: "No plaintext passwords in JSON output"
    - test_name: "String representation security"
      description: "Verify str() and repr() mask SecretStr fields"
      expected_behavior: "All string representations show masked values"
  
  environment_variable_security:
    - test_name: "Environment variable SecretStr conversion"
      env_var: "ONEX_KAFKA_SASL_PASSWORD"
      env_value: "env_secret_password_123"
      expected_behavior: "Environment value converted to SecretStr automatically"
    - test_name: "Environment override security"
      description: "Verify environment overrides maintain SecretStr protection"
      expected_behavior: "Overridden values are still masked"
  
  logging_security:
    - test_name: "Log output masking"
      description: "Verify log messages don't contain plaintext passwords"
      expected_behavior: "All log outputs show masked credentials"
    - test_name: "Error message masking"
      description: "Verify error messages don't expose credentials"
      expected_behavior: "Error messages mask sensitive information"
    - test_name: "Debug output masking"
      description: "Verify debug output doesn't leak credentials"
      expected_behavior: "Debug logs show masked values only"

# Security validation rules
security_validation_rules:
  - rule: "No plaintext passwords in any output"
    severity: "critical"
    check: "All password fields must use SecretStr type"
  - rule: "SecretStr fields properly masked in repr()"
    severity: "critical"
    check: "repr() of SecretStr shows '**********'"
  - rule: "Model dumps exclude or mask SecretStr values"
    severity: "high"
    check: "model_dump() doesn't expose secret values"
  - rule: "Environment variables converted to SecretStr"
    severity: "high"
    check: "Environment overrides maintain SecretStr protection"
  - rule: "Log messages mask credentials"
    severity: "high"
    check: "All logging output masks sensitive fields"

# Documentation
documentation:
  purpose: "Validate SecretStr implementation properly protects sensitive credentials"
  security_features_tested:
    - "Pydantic SecretStr automatic masking in repr() and str()"
    - "Model serialization security (model_dump, JSON)"
    - "Environment variable SecretStr conversion"
    - "Logging and error message credential masking"
    - "Memory protection for sensitive data"
  success_criteria:
    - "All password fields use SecretStr type"
    - "No plaintext passwords visible in any output"
    - "repr() and str() show masked values only"
    - "model_dump() excludes or masks SecretStr fields"
    - "Environment variables properly converted to SecretStr"
    - "Log messages and errors mask sensitive information"
  test_methodology:
    - "Mock scenario to control test environment"
    - "Multiple password types and lengths tested"
    - "Comprehensive output format validation"
    - "Environment variable integration testing"

# Metadata
metadata:
  created_by: "Security Enhancement - SecretStr Implementation"
  test_category: "security"
  security_level: "critical"
  dependency_mode: "mock"
  external_services_required: ["kafka_secure"]
  execution_time_estimate: "2-5 seconds"
  compliance_features:
    - "Credential protection"
    - "Memory security"
    - "Output sanitization"
    - "Environment variable security"
    - "Logging security" 