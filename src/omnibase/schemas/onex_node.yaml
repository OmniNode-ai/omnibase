---
$id: "https://omninode.ai/schemas/onex_node.yaml"
$schema: https://json-schema.org/draft/2020-12/schema
SCHEMA_VERSION: 1.0.0
title: "ONEX Node Metadata Schema"
description: |
  Canonical schema for ONEX node metadata (.onex). All ONEX nodes must conform to this schema.
  This schema is versioned and will support prerelease/build metadata in future versions. For migration and changelog, see /docs/changelog.md.
  For error taxonomy and validation failure codes, see /docs/error_taxonomy.md.

# ┌────────────────────────────────────────────┐
# │         ONEX Metadata Field Summary         │
# └────────────────────────────────────────────┘
# schema_version        → ONEX schema semver
# name                  → Unique node name
# version               → Node version (semver)
# uuid                  → RFC 4122 UUID
# author                → Node author or maintainer
# created_at            → Creation timestamp (ISO 8601)
# last_modified_at      → Last updated timestamp (ISO 8601)
# description           → Human-readable summary
# state_contract        → Path to state schema (.json/.yaml)
# lifecycle             → [draft | review | active | deprecated]
# hash                  → SHA256 of metadata block
# entrypoint            → { type, target }
# runtime_language_hint → Optional interpreter hint (e.g. 'python>=3.10')
# namespace             → Canonical namespace (e.g. omninode.tools.example)
# meta_type             → Type of node (tool, validator, resource, etc.)
# tags                  → Optional list of tags
# trust_score_stub      → Optional stub scoring block
# x-extensions          → Optional custom metadata
# protocols_supported   → Optional list of supported protocols
# base_class            → Optional inheritance (base classes)
# dependencies          → Optional list of dependencies
# environment           → Optional environment requirements
# license               → Optional license identifier
# signature_block       → Optional signing metadata block
type: object
required:
  - schema_version
  - name
  - version
  - uuid
  - author
  - created_at
  - last_modified_at
  - description
  - state_contract
  - lifecycle
  - hash
  - entrypoint
  - namespace
  - meta_type
properties:
  schema_version:
    type: string
    description: "ONEX metadata schema version (semver, e.g., '0.1.0'). Future versions may support prerelease (-beta.1) and build (+build123) metadata."
    pattern: '^\d+\.\d+\.\d+$'
  name:
    type: string
    description: "Unique node name."
    minLength: 1
  version:
    type: string
    description: "Node version (semver, e.g., '0.1.0'). Future versions may support prerelease (-rc.1) and build (+build123) tags."
    pattern: '^\d+\.\d+\.\d+$'
  uuid:
    type: string
    description: "Node UUID (RFC 4122). Must follow standard hyphenation pattern."
    pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
  author:
    type: string
    description: "Author or maintainer."
  created_at:
    type: string
    description: "Creation timestamp (ISO 8601)."
    format: date-time
  last_modified_at:
    type: string
    description: "Last modification timestamp (ISO 8601)."
    format: date-time
  description:
    type: string
    description: "Human-readable description of the node."
  state_contract:
    type: string
    description: "Canonical URI to the state contract schema (e.g., state_contract://summary_block_schema.json). Must match URI format."
    pattern: '^(state_contract|schema)://[a-zA-Z0-9_.-]+@?[a-zA-Z0-9_.\-^>=<~*]+(\.json|\.yaml)?$'
  lifecycle:
    type: string
    description: "Node lifecycle state."
    enum: ["draft", "active", "deprecated", "archived"]
  hash:
    type: string
    description: "SHA256 hash (64-character hex) of the canonicalized metadata block, excluding this field itself."
    pattern: "^[a-fA-F0-9]{64}$"
  entrypoint:
    type: object
    description: "Entrypoint specification for node execution."
    required: [type, target]
    properties:
      type:
        type: string
        description: "Entrypoint type (execution environment, e.g., 'python' for script, 'cli' for shell commands, 'docker' for containerized execution)."
        enum: ["python", "cli", "docker"]
      target:
        type: string
        description: "Execution target (e.g., 'main.py', 'run.sh', or container image name)."
  runtime_language_hint:
    type: string
    description: "Optional language or interpreter hint (e.g., 'python>=3.10', 'bash', 'node16')."
    examples: ["python>=3.10", "bash", "node16"]
  namespace:
    type: string
    description: "Node namespace (e.g., 'omninode.tools.<name>')."
    pattern: '^(omninode|onex)\.[a-zA-Z0-9_\.]+$'
  meta_type:
    type: string
    description: "Node type. Must be one of: tool, validator, agent, model, schema, plugin."
    enum: ["tool", "validator", "agent", "model", "schema", "plugin"]
  tags:
    type: array
    description: "List of tags or categories. (Optional)"
    items:
      type: string
  trust_score_stub:
    type: object
    description: "Stub for trust scoring. (Optional, extensible via x-extensions)"
    properties:
      runs:
        type: integer
        description: "Number of runs."
      failures:
        type: integer
        description: "Number of failures."
      # Additional trust metrics can be added via x-extensions
    required: [runs, failures]
    additionalProperties: true
  x_extensions:
    type: object
    description: "Custom extension fields (optional)."
    additionalProperties: true
  protocols_supported:
    type: array
    description: "List of supported protocols (optional). Each must be a canonical URI."
    items:
      type: string
      pattern: '^(tool|validator|agent|model|schema|plugin)://[a-zA-Z0-9_.-]+@[a-zA-Z0-9_.\-^>=<~*]+$'
  base_class:
    type: array
    description: "List of base classes (optional). Each must be a canonical URI."
    items:
      type: string
      pattern: '^(tool|validator|agent|model|schema|plugin)://[a-zA-Z0-9_.-]+@[a-zA-Z0-9_.\-^>=<~*]+$'
  dependencies:
    type: array
    description: "List of dependencies (optional). Each must be a canonical URI."
    items:
      type: string
      pattern: '^(tool|validator|agent|model|schema|plugin)://[a-zA-Z0-9_.-]+@[a-zA-Z0-9_.\-^>=<~*]+$'
  environment:
    type: array
    description: "List of environment requirements (optional)."
    items:
      type: string
  license:
    type: string
    description: "License identifier (optional)."
  signature_block:
    type: object
    description: "Cryptographic signature metadata for integrity and trust. (Optional)"
    properties:
      signature:
        type: string
        description: "Cryptographic signature (optional)."
      algorithm:
        type: string
        description: "Signature algorithm (e.g., RSA, ECDSA)."
      signed_by:
        type: string
        description: "Signer identity or key reference."
      issued_at:
        type: string
        format: date-time
        description: "Signature issuance timestamp (ISO 8601)."

examples:
  - metadata_version: '0.1'
    protocol_version: '1.0.0'
    schema_version: '0.1.0'
    name: extract_summary_block
    version: '1.0.0'
    uuid: '65dfc205-96f3-4f86-8497-cf6d8a1c4b95'
    author: foundation
    owner: foundation
    copyright: '2025 Foundation, All Rights Reserved'
    created_at: '2025-05-17T10:05:00Z'
    last_modified_at: '2025-05-17T10:15:00Z'
    description: Parses a metadata block and extracts summary and status fields for display.
    state_contract: 'state_contract://summary_block_schema.json'
    lifecycle: active
    hash: 'abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890'
    entrypoint: 'src/omnibase/tools/cli_extract_summary_block.py'
    namespace: omninode.tools.extract_summary_block
    meta_type: tool
    runtime_language_hint: python
    tags: [metadata, docs, summary]
    trust_score_stub:
      runs: 12
      failures: 0
      trust_score: 1.0
    x_extensions: {}
    protocols_supported: ['validator://core.schema_validator@1.0.0']
    base_class: ['validator://core.schema_validator@1.0.0']
    dependencies: ['tool://tools.tree_generator@>=0.2.0']
    environment: []
    license: Apache-2.0
