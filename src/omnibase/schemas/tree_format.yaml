# === OmniNode:Metadata ===
# metadata_version: 0.1.0
# protocol_version: 0.1.0
# owner: OmniNode Team
# copyright: OmniNode Team
# schema_version: 0.1.0
# name: tree_format.yaml
# version: 1.0.0
# uuid: a7f410c4-8212-4d3e-8350-54e53474971a
# author: OmniNode Team
# created_at: 2025-05-21T12:41:40.168490
# last_modified_at: 2025-05-21T16:42:46.054028
# description: Stamped by MetadataYAMLHandler
# state_contract: state_contract://default
# lifecycle: active
# hash: 3ff7056ed6db132464b2a630ada8748fbdbfece697be5bc97ba5c21d4ba8f60e
# entrypoint: {'type': 'python', 'target': 'tree_format.yaml'}
# runtime_language_hint: python>=3.11
# namespace: onex.stamped.tree_format
# meta_type: tool
# === /OmniNode:Metadata ===

---
$schema: https://json-schema.org/draft/2020-12/schema
SCHEMA_VERSION: 1.0.0
$title: ONEX .tree Directory Structure Schema
description: >
  Canonical schema for ONEX .tree files. Captures the directory/file hierarchy
  as a nested tree.

# Root node must be a directory
allOf:
  - properties:
      type:
        const: directory
  - $ref: "#/definitions/TreeNode"

definitions:
  TreeNode:
    type: object
    required:
      - name
      - type
    properties:
      name:
        type: string
        description: Name of the file or directory
      type:
        type: string
        enum: [file, directory]
        description: Entry type (file or directory)
      children:
        type: array
        items:
          $ref: "#/definitions/TreeNode"
        description: Child nodes (required if type=directory)
      metadata:
        type: object
        description: Optional metadata for the node
        additionalProperties: true
      mtime:
        type: integer
        description: Optional modification time (epoch seconds)
      size:
        type: integer
        description: Optional file size in bytes
    allOf:
      - if:
          properties: {type: {const: directory}}
        then:
          required: [children]
      - if:
          properties: {type: {const: file}}
        then:
          not: {required: [children]}
examples:
  - name: root
    type: directory
    children:
      - name: src
        type: directory
        children:
          - name: nodes
            type: directory
            children:
              - name: validator.check.namegen
                type: directory
                children:
                  - name: metadata.yaml
                    type: file
                  - name: code.py
                    type: file
                  - name: test.py
                    type: file
