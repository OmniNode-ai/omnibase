---
description: 
globs: 
alwaysApply: true
---
---
# RIPER 12: Agentic Execution Protocol
# Version: 1.0
# Purpose: Structured mode-based agent execution for ONEX nodes and autonomous task flows.

modes:
  - id: 1
    name: RESEARCH
    tag: "[MODE: RESEARCH]"
    purpose: "Collect information, understand system state, and ask clarifying questions."
    permitted:
      - Reading files
      - Asking clarifying questions
      - Understanding architecture or code structure
    forbidden:
      - Providing solutions, plans, or code
    transitions:
      next: ["DONE", "NEXT", "GO"]
      back: ["ESCALATE→MODE X"]
    completion_heuristic: "AI prompts: 'Research complete. Ready for INNOVATE?'"

  - id: 2
    name: INNOVATE
    tag: "[MODE: INNOVATE] [LOOP]"
    purpose: "Brainstorm potential solutions and discuss tradeoffs."
    permitted:
      - Idea generation
      - Pros/cons analysis
      - Hypothesis formation
    forbidden:
      - Concrete planning
      - Code writing
    transitions:
      next: ["DONE", "NEXT", "GO"]
      iterate: ["ITERATE"]
      back: ["ESCALATE→MODE X"]
    completion_prompt: "Summarize ideas and prompt: 'Ready to PLAN?'"

  - id: 3
    name: PLAN
    tag: "[MODE: PLAN]"
    purpose: "Draft a detailed technical plan to execute the best idea."
    permitted:
      - Writing checklists with file paths, function names, and sequential actions
    forbidden:
      - Writing code or implementation logic
    output: "Numbered checklist of steps"
    transitions:
      next: ["DONE", "NEXT", "GO"]
      back: ["ESCALATE→MODE X"]
    completion_heuristic: "Plan complete. Prompt: 'Execute now?'"

  - id: 4
    name: EXECUTE
    tag: "[MODE: EXECUTE] [LOOP]"
    purpose: "Implement plan precisely and sequentially."
    permitted:
      - Writing code strictly per plan
    forbidden:
      - Deviation or creative reinterpretation
    behavior:
      - Follow checklist item → Confirm → Proceed
      - Can loop on individual steps via ITERATE
    transitions:
      iterate: ["ITERATE"]
      next: ["DONE", "NEXT", "GO"]
      back: ["ESCALATE→MODE X"]

  - id: 5
    name: REVIEW
    tag: "[MODE: REVIEW]"
    purpose: "Compare implementation to plan."
    permitted:
      - Line-by-line comparison
      - Deviation flagging (⚠️ DEVIATION DETECTED)
    forbidden:
      - Code modifications
    transitions:
      next: ["DONE", "NEXT", "GO"]
      back: ["ESCALATE→MODE X"]

  - id: 6
    name: STANDARDS_REVIEW
    tag: "[MODE: STANDARDS REVIEW]"
    purpose: "Check compliance with architecture, naming, and formatting standards."
    behavior:
      - Compare to `standards.mdc`
      - Enforce prefix/naming directory compliance
      - Flag deviations clearly
    transitions:
      next: ["DONE", "NEXT", "GO"]
      back: ["ESCALATE→MODE X"]

  - id: 7
    name: OBSERVABILITY
    tag: "[MODE: OBSERVABILITY]"
    purpose: "Verify structured logging, metrics, and trace spans are in place."
    behavior:
      - Audit emit hooks and logging granularity
      - Check coverage of critical path
    transitions:
      next: ["DONE", "NEXT", "GO"]
      back: ["ESCALATE→MODE X"]

  - id: 8
    name: AUTONOMOUS_TASK
    tag: "[MODE: AUTONOMOUS TASK]"
    purpose: "Run the full RESEARCH → REVIEW loop with no human input, under pre-approved scope."
    entry_criteria:
      - Approved plan
      - No open questions
    behavior:
      - Follows locked loop with fail-fast ESCALATE on blockers
    exit_statuses:
      - "✅ TASK COMPLETED SUCCESSFULLY"
      - "❌ TASK FAILED – ESCALATED"

  - id: 9
    name: EXECUTE_ITERATION
    tag: "[MODE: EXECUTE ITERATION]"
    purpose: "Test, fix, review individual checklist items until success or max retries."
    parameters:
      max_retries: 3
    behavior:
      - PLAN → EXECUTE → TEST → REVIEW for each step
      - ESCALATE on failure after retries

  - id: 10
    name: TEST_LOOP
    tag: "[MODE: TEST LOOP]"
    purpose: "Isolated red-green-refactor loop for test-focused development."
    permitted:
      - Test writing or fixes only
    forbidden:
      - Feature development
    parameters:
      max_iterations: 5
      stagnation_threshold: 2
    behavior:
      - Run tests → Fix → Rerun
      - Exit on test pass or max/stagnation
    exit_prompt: "Type RETRY, ABORT, DONE/NEXT/GO, or ESCALATE→MODE X"

  - id: 11
    name: CODE_REVIEW
    tag: "[MODE: CODE REVIEW] [SUB-MODE: {current_sub_mode}]"
    purpose: "Structured, multi-faceted code review with specialized focus areas and severity tracking."
    permitted:
      - Analyzing code quality, security, performance, architecture
      - Reading git diffs, PRs, files, or subsystems
      - Providing severity-tagged structured feedback
    forbidden:
      - Making code changes or implementations
      - Modifying files under review
    sub_modes:
      QUALITY:
        focus: "Readability, maintainability, idiomatic code"
        analysis: 
          - Code smells, complexity, naming, SOLID/KISS/YAGNI
      SECURITY:
        focus: "Vulnerability detection and risk mitigation"
        analysis: 
          - Input validation, secrets, access control
      PERFORMANCE:
        focus: "Efficiency and latency awareness"
        analysis:
          - Bottlenecks, blocking ops, caching
      ARCHITECTURE:
        focus: "ONEX alignment and structural integrity"
        analysis:
          - Node/plugin compliance, layer boundaries
      STANDARDS:
        focus: "Style, structure, protocol adherence"
        analysis:
          - Folder layout, naming prefixes, metadata blocks
      TESTING:
        focus: "Coverage and maintainability"
        analysis:
          - Edge cases, AAA structure, mocking correctness
      GIT_DIFF:
        focus: "Scope of change and impact"
        analysis:
          - Atomic commits, regression risk, metadata changes
      COMPREHENSIVE:
        focus: "Runs all other sub-modes in sequence"
    parameters:
      severity_levels: ["CRITICAL", "MAJOR", "MINOR", "SUGGESTION"]
      default_sub_mode: "COMPREHENSIVE"
      auto_detect_scope: true
    scope_options:
      - "git status (working directory)"
      - "git diff (commits/branches)"
      - "PR context"
      - "file/directory paths"
      - "ONEX nodes or protocols"
    integration:
      - Can call STANDARDS_REVIEW and OBSERVABILITY
      - Can chain sub-modes dynamically
    exit_prompt: "Type DONE/NEXT/GO, specify a SUB-MODE, or ESCALATE→MODE X"

  - id: 12
    name: DEBUG
    tag: "[MODE: DEBUG]"
    purpose: "Enable detailed introspection and debug logging without progressing execution state."
    permitted:
      - Inspecting node state and metadata
      - Emitting debug-level logs or trace output
      - Reviewing intermediate outputs or traces
      - Viewing logs from prior modes
    forbidden:
      - Any code modification or execution
      - State mutation or checklist progression
    parameters:
      emit_mode: ["JSON", "MARKDOWN", "YAML"]
      trace_level: ["LOW", "MEDIUM", "HIGH"]
    behavior:
      - Pause active flow; snapshot node state
      - Emit structured debug report using selected emit_mode
      - Provide tools for manual replay or rollback inspection
    transitions:
      exit_prompt: "Type RESUME to return to previous mode, or ESCALATE→MODE X to change."

enhancements:
  automatic_checklist_progression:
    description: "Auto-progress through PLAN/EXECUTE steps unless blocked or ESCALATED."
  ordered_execution:
    description: "Enforces sequence unless user overrides with GO/NEXT/SKIP/ESCALATE."
  escalation_protocol:
    description: "Each mode allows explicit backtracking to previous mode with ESCALATE→MODE X."
  override_control:
    description: "User can override flow with any of: NEXT, GO, ESCALATE, PAUSE, SKIP ITEM X"
