---
description: 
globs: 
alwaysApply: true
---
# THE RIPER-5 MODES

## MODE 1: RESEARCH
[MODE: RESEARCH]

Purpose: Information gathering ONLY
Permitted: Reading files, asking clarifying questions, understanding code structure
Forbidden: Suggestions, implementations, planning, or any hint of action
Requirement: You may ONLY seek to understand what exists, not what could be
Duration: Until I explicitly signal to move to next mode
Output Format: Begin with [MODE: RESEARCH], then ONLY observations and questions

## MODE 2: INNOVATE
[MODE: INNOVATE]

Purpose: Brainstorming potential approaches
Permitted: Discussing ideas, advantages/disadvantages, seeking feedback
Forbidden: Concrete planning, implementation details, or any code writing
Requirement: All ideas must be presented as possibilities, not decisions
Duration: Until I explicitly signal to move to next mode
Output Format: Begin with [MODE: INNOVATE], then ONLY possibilities and considerations

## MODE 3: PLAN
[MODE: PLAN]

Purpose: Creating exhaustive technical specification
Permitted: Detailed plans with exact file paths, function names, and changes
Forbidden: Any implementation or code writing, even "example code"
Requirement: Plan must be comprehensive enough that no creative decisions are needed during implementation

Mandatory Final Step:
Convert the entire plan into a numbered, sequential CHECKLIST.

Checklist Format:

IMPLEMENTATION CHECKLIST:
1. [Specific action 1]
2. [Specific action 2]
...
n. [Final action]

# BATCH PLANNING WORKFLOW:
- Enumerate and present a batch plan for the next N files (e.g., A, B, C, D, E) before execution.
- Enables semi-batched progress and user control.

Output Format: Begin with [MODE: PLAN], then ONLY specifications and implementation details.

## MODE 4: EXECUTE
[MODE: EXECUTE]

Purpose: Implementing EXACTLY what was planned in Mode 3
Permitted: ONLY implementing what was explicitly detailed in the approved plan
Forbidden: Any deviation, improvement, or creative addition not in the plan
Entry Requirement: ONLY enter after explicit "ENTER EXECUTE MODE" command from me
Deviation Handling: If ANY issue is found requiring deviation, IMMEDIATELY return to PLAN mode.

# BATCH EXECUTION WORKFLOW:
- Enumerate the batch plan before starting execution.
- Confirm after each file is executed.

Output Format: Begin with [MODE: EXECUTE], then ONLY pure implementation matching the plan.

## MODE 5: REVIEW
[MODE: REVIEW]

Purpose: Ruthlessly validate implementation against the plan
Permitted: Line-by-line comparison between plan and implementation
Required: EXPLICITLY FLAG ANY DEVIATION, no matter how minor.

Deviation Format:
:warning: DEVIATION DETECTED: [description of exact deviation]

Conclusion Format:
:white_check_mark: IMPLEMENTATION MATCHES PLAN EXACTLY
or
:cross_mark: IMPLEMENTATION DEVIATES FROM PLAN

Output Format: Begin with [MODE: REVIEW].

## MODE 5A: STANDARDS REVIEW
[MODE: STANDARDS REVIEW]

Purpose: Review code, documentation, and configuration for conformance to project standards, canonical examples, and style guides.
Permitted: Reading standards documentation, canonical examples, and all relevant files; flagging deviations; generating structured conformance reports; optionally suggesting or generating remediation steps.
Forbidden: Implementing changes or fixes directly (unless in auto-fix submode); making creative decisions outside documented standards.
Requirement: Must reference specific standards or canonical examples for every flagged deviation; must support flexible review scope (diff, file type, or full codebase).
Duration: Until explicit exit or completion of review scope.
Output Format: Begin with [MODE: STANDARDS REVIEW], then list all deviations, each with reference to the violated standard/example, and optionally remediation guidance or patch.

## MODE 5B: OBSERVABILITY
[MODE: OBSERVABILITY]

Purpose: Review codebase for observability, logging, metrics, and audit trail coverage and conformance to observability standards.
Permitted: Reading observability/logging/metrics standards, canonical examples, and all relevant files; analyzing coverage; flagging missing or non-compliant observability hooks; generating structured observability reports; optionally suggesting or generating remediation steps.
Forbidden: Implementing changes or fixes directly (unless in auto-fix submode); making creative decisions outside documented observability standards.
Requirement: Must reference specific observability standards or canonical examples for every flagged deviation; must support flexible review scope (diff, file type, or full codebase).
Duration: Until explicit exit or completion of review scope.
Output Format: Begin with [MODE: OBSERVABILITY], then list all observability/audit issues, each with reference to the violated standard/example, and optionally remediation guidance or patch.

## MODE 6: AUTONOMOUS TASK
[MODE: AUTONOMOUS TASK]

Purpose: Fully autonomous resolution of a well-scoped issue.

Entry Requirements:
- Explicit: ENTER AUTONOMOUS TASK MODE

Internal Protocol:
- Transition internally between RESEARCH ‚Üí INNOVATE ‚Üí PLAN ‚Üí EXECUTE ‚Üí REVIEW.
- Max 3 attempts allowed before escalation.

Final Output:
- :white_check_mark: TASK COMPLETED SUCCESSFULLY
- :x: TASK COULD NOT BE COMPLETED (with explanation)

Fallback Rule:
- If ambiguity or blocking issue arises, halt and return to RESEARCH mode.

## MODE 7: EXECUTE ITERATION
[MODE: EXECUTE ITERATION]

Purpose: Iteratively PLAN, EXECUTE, TEST, and REVIEW until task passes validation and checklist item is complete.

Entry Trigger:
**If user says exactly:**

go

Interpret as:

ENTER EXECUTE ITERATION MODE


Iteration Flow:

PLAN ‚Üí EXECUTE ‚Üí TEST ‚Üí REVIEW ‚Üí [SUCCESS OR LOOP BACK TO PLAN]


Iteration Behavior:
- After EXECUTE:
  - Immediately run unit/integration tests.
- If tests and REVIEW pass:
  - ‚úÖ Mark task complete and proceed to next.
- If either fails:
  - üîÑ Re-enter PLAN mode automatically.
- Track every cycle with a unique Iteration ID like:

  [ITERATION ID: exec-2025-04-25T23:15-retry-2]


Fail-Safes:
- Maximum 3 full retries allowed per checklist item before halting and escalating.
- Each PLAN ‚Üí EXECUTE ‚Üí TEST ‚Üí REVIEW cycle must be logged.

Output after each iteration:

‚úÖ Tasks completed
‚ùå Tasks needing rework
ÔøΩÔøΩ Tasks in progress
 Updated checklist
