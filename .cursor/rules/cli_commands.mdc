---
description: 
globs: 
alwaysApply: true
---
# Cursor Rule: CLI Commands Reference

> **Status:** Canonical
> **Last Updated:** 2025-05-26
> **Purpose:** Quick reference for all CLI commands available in the ONEX system

## Main ONEX CLI Tool

The primary CLI tool is located at `src/omnibase/cli_tools/onex/v1_0_0/cli_main.py`.

### Usage
```bash
# Run the main CLI
poetry run onex [OPTIONS] COMMAND [ARGS]...
```

### Available Commands
- `run` - Run ONEX nodes with automatic version resolution
- `list-nodes` - List all available ONEX nodes and their versions
- `node-info` - Get detailed information about a specific ONEX node
- `info` - Display system information
- `stamp` - Stamp ONEX node metadata files with hashes and signatures
- `validate` - Validate ONEX node metadata files
- `version` - Display version information
- `handlers` - List and manage file type handlers

### Node Operations

#### Run Nodes with Auto-Discovery
```bash
# Run any node with automatic version resolution
poetry run onex run parity_validator_node
poetry run onex run stamper_node
poetry run onex run tree_generator_node
poetry run onex run registry_loader_node
poetry run onex run schema_generator_node
poetry run onex run template_node

# Run with specific version
poetry run onex run stamper_node --version v1_0_0

# Run with arguments (JSON format)
poetry run onex run parity_validator_node --args='["--format", "summary"]'
poetry run onex run stamper_node --args='["file", "README.md"]'

# Get node introspection
poetry run onex run parity_validator_node --introspect
poetry run onex run stamper_node --introspect

# List available versions for a node
poetry run onex run stamper_node --list-versions
```

#### Node Discovery and Information
```bash
# List all available nodes
poetry run onex list-nodes

# Get detailed info about a specific node
poetry run onex node-info parity_validator_node
poetry run onex node-info stamper_node --version v1_0_0
```

### Traditional Commands

#### File Operations
```bash
# Stamp files
poetry run onex stamp file path/to/file.py
poetry run onex stamp file **/*.py
poetry run onex stamp file **/*.yaml
poetry run onex stamp file **/*.md

# Validate files
poetry run onex validate path/to/file.py
poetry run onex validate src/omnibase/nodes/
poetry run onex validate src/omnibase/core/
```

#### System Information
```bash
# Get system info
poetry run onex info

# Get version
poetry run onex version

# List handlers
poetry run onex handlers list
```

### Parity Validator Node

The parity validator node ensures all nodes comply with ONEX ecosystem standards.

#### Basic Validation
```bash
# Validate all nodes in the ecosystem
poetry run onex run parity_validator_node

# Validate specific node directory
poetry run onex run parity_validator_node --args='["--nodes-directory", "src/omnibase/nodes/logger_node"]'

# Validate with specific output format
poetry run onex run parity_validator_node --args='["--format", "summary"]'
poetry run onex run parity_validator_node --args='["--format", "detailed"]'
poetry run onex run parity_validator_node --args='["--format", "json"]'
```

#### Specific Validation Types
```bash
# Validate only introspection functionality
poetry run onex run parity_validator_node --args='["--validation-types", "introspection_validity"]'

# Validate only metadata compliance
poetry run onex run parity_validator_node --args='["--validation-types", "metadata_compliance"]'

# Validate only file structure
poetry run onex run parity_validator_node --args='["--validation-types", "file_structure"]'

# Validate multiple specific types
poetry run onex run parity_validator_node --args='["--validation-types", "introspection_validity,metadata_compliance"]'
```

#### Advanced Options
```bash
# Include performance metrics
poetry run onex run parity_validator_node --args='["--include-performance-metrics"]'

# Verbose output with detailed logging
poetry run onex run parity_validator_node --args='["--verbose"]'

# Combine options for comprehensive validation
poetry run onex run parity_validator_node --args='["--nodes-directory", "src/omnibase/nodes", "--format", "detailed", "--include-performance-metrics", "--verbose"]'

# Get parity validator introspection
poetry run onex run parity_validator_node --introspect
```

#### Common Validation Workflows
```bash
# Quick ecosystem health check
poetry run onex run parity_validator_node --args='["--format", "summary"]'

# Detailed validation for specific node
poetry run onex run parity_validator_node --args='["--nodes-directory", "src/omnibase/nodes/template_node", "--format", "detailed"]'

# Introspection compliance check for all nodes
poetry run onex run parity_validator_node --args='["--validation-types", "introspection_validity", "--format", "detailed"]'

# Full validation with performance metrics
poetry run onex run parity_validator_node --args='["--format", "json", "--include-performance-metrics"]'
```

## Testing Commands

### Run Tests
```bash
# Run all tests
poetry run pytest

# Run specific test file
poetry run pytest path/to/test_file.py

# Run with verbose output
poetry run pytest -v

# Run specific test method
poetry run pytest path/to/test_file.py::TestClass::test_method

# Run tests with specific markers
poetry run pytest -m "mock"
poetry run pytest -m "integration"
```

### Pre-commit Hooks
```bash
# Run all pre-commit hooks
pre-commit run --all-files

# Run specific hook
pre-commit run metadata-stamper --all-files
pre-commit run onextree-generator --all-files
pre-commit run onextree-validator --all-files
```

## Development Commands

### Code Quality
```bash
# Format code with black
poetry run black src/

# Lint with ruff
poetry run ruff src/

# Type check with mypy
poetry run mypy src/

# Sort imports with isort
poetry run isort src/

# Lint YAML files
poetry run yamllint .
```

### Poetry Commands
```bash
# Install dependencies
poetry install

# Add dependency
poetry add package_name

# Add dev dependency
poetry add --group dev package_name

# Update dependencies
poetry update

# Show dependency tree
poetry show --tree

# Run command in poetry environment
poetry run command
```

## Troubleshooting Commands

### Environment Info
```bash
# Check poetry environment
poetry env info

# Check Python version
poetry run python --version

# Check installed packages
poetry show

# Check for dependency conflicts
poetry check
```

### Debug Commands
```bash
# Run with debug output
poetry run onex --debug run node_name

# Run with verbose output
poetry run onex --verbose run node_name
```

## Quick Reference Patterns

### Common Workflows
```bash
# 1. After making changes, regenerate .onextree
poetry run onex run tree_generator_node --args='["--root-directory", "src/omnibase", "--output-path", ".onextree"]'

# 2. Stamp new/modified files
poetry run onex stamp file path/to/modified/file.py

# 3. Run tests to verify changes
poetry run pytest

# 4. Run pre-commit hooks before committing
pre-commit run --all-files

# 5. Validate ecosystem compliance
poetry run onex run parity_validator_node

# 6. Get node information
poetry run onex list-nodes
poetry run onex node-info stamper_node
```

### Node Operations
```bash
# Discover all available nodes
poetry run onex list-nodes

# Get detailed info about any node
poetry run onex node-info parity_validator_node
poetry run onex node-info stamper_node --version v1_0_0

# Run any node with introspection
poetry run onex run stamper_node --introspect
poetry run onex run tree_generator_node --introspect

# Check available versions
poetry run onex run stamper_node --list-versions
```

### File Operations
```bash
# Stamp specific file types
poetry run onex stamp file **/*.py
poetry run onex stamp file **/*.yaml
poetry run onex stamp file **/*.md

# Validate specific directories
poetry run onex validate src/omnibase/nodes/
poetry run onex validate src/omnibase/core/
```

## Notes

- Use `poetry run onex run node_name` for efficient commands with auto-discovery
- All nodes support `--introspect` for comprehensive metadata discovery
- Auto-discovery finds nodes and resolves latest versions automatically
- Always use `poetry run` prefix for commands to ensure correct environment
- The `.onextree` file must be regenerated after adding/removing files
- Pre-commit hooks will automatically run stamper and tree generator
- Use `--help` flag with any command to see detailed options
- Most commands support `--verbose` and `--debug` flags for troubleshooting

## Performance Features

- **Fast execution:** Pre-commit hooks run in 1-2 seconds
- **Auto-discovery:** Instant node discovery and version resolution
- **Professional UX:** Commands comparable to major cloud platforms (AWS, GCP, etc.)
- **Zero-maintenance versioning:** Latest versions auto-resolved, explicit versions still supported
