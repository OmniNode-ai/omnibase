# === OmniNode:Metadata ===
# metadata_version: 0.1.0
# schema_version: 1.1.0
# uuid: <to-be-generated>
# name: test_handler_python.py
# version: 1.0.0
# author: OmniNode Team
# created_at: <to-be-generated>
# last_modified_at: <to-be-generated>
# description: Unit tests for PythonHandler.
# state_contract: none
# lifecycle: active
# hash: 0000000000000000000000000000000000000000000000000000000000000000
# entrypoint: {'type': 'python', 'target': 'test_handler_python.py'}
# namespace: onex.stamped.test_handler_python.py
# meta_type: test
# === /OmniNode:Metadata ===

from pathlib import Path

from omnibase.handlers.handler_python import PythonHandler
from omnibase.metadata.metadata_constants import PY_META_CLOSE, PY_META_OPEN
from omnibase.model.model_node_metadata import NodeMetadataBlock
from omnibase.model.model_onex_message_result import OnexResultModel, OnexStatus


class ConcretePythonHandler(PythonHandler):
    def extract_block(self, path: Path, content: str) -> tuple[None, str]:
        return None, content
    def serialize_block(self, meta: object) -> str:
        return "# === OmniNode:Metadata ===\n# ...\n# === /OmniNode:Metadata ==="
    def validate(self, path: Path, content: str, **kwargs: object) -> OnexResultModel:
        return OnexResultModel(status=OnexStatus.success, target=str(path), messages=[], metadata={"note": "dummy"})
    def compute_hash(self, path: Path, content: str, **kwargs: object) -> str:
        return "0" * 64
    def pre_validate(self, path: Path, content: str, **kwargs: object) -> OnexResultModel:
        return OnexResultModel(status=OnexStatus.success, target=str(path), messages=[], metadata={"note": "dummy"})
    def post_validate(self, path: Path, content: str, **kwargs: object) -> OnexResultModel:
        return OnexResultModel(status=OnexStatus.success, target=str(path), messages=[], metadata={"note": "dummy"})
    def stamp(self, path: Path, content: str, **kwargs: object) -> OnexResultModel:
        return OnexResultModel(status=OnexStatus.success, target=str(path), messages=[], metadata={"content": "# === OmniNode:Metadata ===\n# ...\n# === /OmniNode:Metadata ===\n" + content, "note": "dummy"})


def test_can_handle_default() -> None:
    handler = ConcretePythonHandler()
    assert handler.can_handle(Path("foo.py"), "")
    assert not handler.can_handle(Path("foo.yaml"), "")


def test_stamp_unstamped() -> None:
    handler = ConcretePythonHandler()
    content = "print('hello world')\n"
    result = handler.stamp(Path("foo.py"), content)
    if result.status != OnexStatus.success:
        print("DEBUG result.metadata:", result.metadata)
        print("DEBUG result.messages:", result.messages)
        assert False, f"Stamp failed: {result.metadata}, {result.messages}"
    assert result.status == OnexStatus.success
    assert "Stamped Python file" in result.metadata["note"]
    assert "content" in result.metadata
    assert result.metadata["content"].startswith(PY_META_OPEN)
    # Block is at top, followed by blank line, then code
    assert result.metadata["content"].split("\n")[0] == PY_META_OPEN
    assert "print('hello world')" in result.metadata["content"]


def test_stamp_already_stamped() -> None:
    handler = ConcretePythonHandler()
    content = "print('hello world')\n"
    stamped = handler.stamp(Path("foo.py"), content).metadata["content"]
    result2 = handler.stamp(Path("foo.py"), stamped)
    assert result2.status == OnexStatus.success
    assert "Stamped Python file" in result2.metadata["note"]
    # Should not double-stamp
    assert result2.metadata["content"].count(PY_META_OPEN) == 1


def test_stamp_enum_serialization() -> None:
    handler = ConcretePythonHandler()
    content = "print('enum test')\n"
    result = handler.stamp(Path("foo.py"), content)
    # All enums should be serialized as their .value
    block = result.metadata["content"].split("\n")
    # Check for known enum values in block
    assert any("lifecycle: active" in line for line in block)
    assert any("meta_type: tool" in line for line in block)


def test_spacing_after_block() -> None:
    handler = ConcretePythonHandler()
    content = "print('spacing test')\n"
    result = handler.stamp(Path("foo.py"), content)
    # There should be exactly one blank line after the block if code follows
    lines = result.metadata["content"].split("\n")
    assert PY_META_CLOSE in lines
    idx = lines.index(PY_META_CLOSE)
    # Next line should be blank, then code
    assert lines[idx + 1] == ""
    assert "print('spacing test')" in lines[idx + 2]


def test_hash_stability() -> None:
    handler = ConcretePythonHandler()
    content = "print('hash test')\n"
    stamped1 = handler.stamp(Path("foo.py"), content).metadata["content"]
    hash1 = handler.compute_hash(Path("foo.py"), stamped1)
    # Print debug info for first stamp
    meta1 = NodeMetadataBlock.from_file_or_content(stamped1)
    print("STAMP1 last_modified_at:", meta1.last_modified_at)
    print("STAMP1 hash:", meta1.hash)
    print("STAMP1 content:\n", stamped1)
    # Stamping again should not change hash if content unchanged
    stamped2 = handler.stamp(Path("foo.py"), stamped1).metadata["content"]
    hash2 = handler.compute_hash(Path("foo.py"), stamped2)
    # Print debug info for second stamp
    meta2 = NodeMetadataBlock.from_file_or_content(stamped2)
    print("STAMP2 last_modified_at:", meta2.last_modified_at)
    print("STAMP2 hash:", meta2.hash)
    print("STAMP2 content:\n", stamped2)
    if stamped1 != stamped2:
        import difflib

        print("===== DIFF =====")
        for line in difflib.unified_diff(
            stamped1.splitlines(), stamped2.splitlines(), lineterm=""
        ):
            print(line)
        print("================")
    assert hash1 == hash2


def test_stamp_invalid_python() -> None:
    handler = ConcretePythonHandler()
    bad_content = "def broken(:\n"
    result = handler.stamp(Path("foo.py"), bad_content)
    # Should return error or warning, not crash
    assert result.status in [OnexStatus.success, OnexStatus.error]


def test_pre_post_validate() -> None:
    handler = ConcretePythonHandler()
    content = "print('validate test')\n"
    pre = handler.pre_validate(Path("foo.py"), content)
    post = handler.post_validate(Path("foo.py"), content)
    assert pre.status in [OnexStatus.success, OnexStatus.warning, OnexStatus.error]
    assert post.status in [OnexStatus.success, OnexStatus.warning, OnexStatus.error]


def test_compute_hash() -> None:
    handler = ConcretePythonHandler()
    content = "print('hash test')\n"
    stamped = handler.stamp(Path("foo.py"), content).metadata["content"]
    hash_val = handler.compute_hash(Path("foo.py"), stamped)
    assert hash_val is None or isinstance(hash_val, str)
